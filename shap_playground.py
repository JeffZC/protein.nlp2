import os
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "2"

# import
import copy
import torch
torch.cuda.is_available()
torch.cuda.empty_cache()

from transformers import RobertaConfig
from pathlib import Path
from tokenizers import ByteLevelBPETokenizer
from tokenizers.processors import BertProcessing

# load model
model_path = "model_bam_99"

from transformers import RobertaForSequenceClassification
tuned_model = RobertaForSequenceClassification.from_pretrained(model_path)

# data path
paths = [str(x) for x in Path("Borrelia_garinii_txt").glob("*.txt")]

# tokenizer 
from transformers import PreTrainedTokenizerFast
tokenizer = PreTrainedTokenizerFast(tokenizer_file="byte-level-BPE.tokenizer.json")
tokenizer.add_special_tokens({'pad_token': '[PAD]'})

import shap
import numpy as np 
import scipy as sp

# tuned_model = BertForSequenceClassification.from_pretrained("best-bert-base-uncased-0.5")
# tokenizer = BertTokenizer.from_pretrained("bert-base-uncased", do_lower_case=True)

# Function to predict label 
def get_prediction(text):
    max_length = 512

    # prepare our text into tokenized sequence
    inputs = tokenizer(text, padding=True, truncation=True, max_length=max_length, return_tensors="pt")
    # perform inference to our model
    outputs = tuned_model(**inputs)
    # get output probabilities by doing softmax
    probs = outputs[0].softmax(1)
    # executing argmax function to get the candidate label
    return probs.argmax()

# Function to make prediction on how "stereotypical" a sentence is 
def get_prediction_stereo(text):

    max_length = 512

    # prepare our text into tokenized sequence
    inputs = tokenizer(text, padding=True, truncation=True, max_length=max_length, return_tensors="pt")
    # perform inference to our model
    outputs = tuned_model(**inputs)

    outputs = tuned_model(**inputs)[0].detach().numpy()
    scores = (np.exp(outputs).T / np.exp(outputs).sum(-1)).T
    val = sp.special.logit(scores[:,1]) # use one vs rest logit units
    return val

# Batch prediction function for stereotypes
def f_batch_stereo(x):
    val = np.array([])
    for i in x:
    #   val = np.append(val, get_prediction(i))
      val = np.append(val, get_prediction_stereo(i))
    return val

def get_prediction_antistereo(text):

    max_length = 512

    # prepare our text into tokenized sequence
    inputs = tokenizer(text, padding=True, truncation=True, max_length=max_length, return_tensors="pt")
    # perform inference to our model
    outputs = tuned_model(**inputs)

    outputs = tuned_model(**inputs)[0].detach().numpy()
    scores = (np.exp(outputs).T / np.exp(outputs).sum(-1)).T
    val = sp.special.logit(scores[:,2]) # use one vs rest logit units
    return val

def f_batch_antistereo(x):
    val = np.array([])
    for i in x:
    #   val = np.append(val, get_prediction(i))
      val = np.append(val, get_prediction_antistereo(i))
    return val

explainer_stereo = shap.Explainer(f_batch_stereo, tokenizer)
explainer_antistereo = shap.Explainer(f_batch_antistereo, tokenizer)

exp_texts = [] 
# exp_texts.append("CCCCCCCCCCHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCCCCEEEEEECCCCHHHHHHHHHHHHHCCEEEEEECCHHHHHHHHCCCCCCCEEECCHHHHHHHHHCCCEEECCHHHHHHHCCCCHHHHCCCCCCCCECCCCCCCCCEEEEEECCCCCCEECCCCCCEEEEEEEECCCEEEECHHHCCCCCCCHHHHHCHHHCCCEEECCCCCCHHHHHHHHHHHHCCCCCCCCCCCCHHHHHHHHHHHHHHHHCCCCCCCCCHHHHHHHHHCCCEEEEEECCHHHHHHHHCCCCEEEECCCCCCEEEEEEEEEECCCCCCCHHHHHHHHHHHCCHHHHHHHHCCCCCCCCHHHHHHCCHHHHHHHHCCCCCCCCCCCCCCCEEECCCCCCCCCCHHHHHCCCEEECCCCCCHHHHHHHHHHHHC")
# exp_texts.append("The football player is on the sideline. [SEP] He is sly and timid.")
# exp_texts.append("The football player is on the sideline. [SEP] He is strong and a little bit dumb.")
# exp_texts.append('CCCCHHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCEEEEEECCCCCCCCCCCCCCHHHHHHHHHHCHCHEEECCCCCCCCEECCEEEECCEECCCCCEEEEEECCCCEEECCCHCCCCCCECCHHHHHHHHHHHHCCCCCCCCCCCCCCCECCHHHHHHHHHHCCCCCCCCCCCEEEECCCCEEEEEECCCCCCHHHHHCCCCCCCCCHHHHHHHHHCCCCCCCCCCCEEEEEECCCCEEEEEECCCCCCCCCCCCCCCCCCHHHHHHHHCCCCCCCCCEEEEEECCCHHHHHHHHHHCCCCEECCCHHHHHHHCCCHHHHHHHHHCCCEEEECCCCCEEEEEEECCCCCCCCCCHHHHHHHHHHHHCCCHHHHHHHHHCCCCEECCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHCCCECCCCEEECCCCCEEEEEEECCCCCHHHHHHHHHHHHHHHCCCEEEEEECCHHHHHHHHHCCCCCEEEEEEECCCCCHHHHHHHHHCCCCCCCCCCCCCCHHHHHHHHHHHHCCHHHHHHHHHHHHHHHHHHCCEEEEEEEEEEEEECCCCCCCCCCCCCCCCCCCEEECCCCC')
#exp_texts.append('CCCCCCCEECHHHCCCHHHHHHCCHHHHHHHHHHHHHHCCCCCCCCEEEEHHHHHHHHHHCCCHHHHHHHHHCCCCCCHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHHCCCCCCCEEEECCCCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHCCCHHHHHHHHHCCCCHHHCCEEEEEEEEECCCCCCEEEEEECCCCCCCCCEEEEEECCCCCHHHHCCCCCCEEEEEEHHHHHCCCCCEEEEECCCCEEEEEECCCCCCCCCEEEEECCHHHHHCCCCCHHHHHHHHHHHHHHHHHHCCCEEEEEEEECCCCCEEEEEEECCCCCCCCCCCCHHHHHHHCCCCEEEEEEECCCCEEEEEEEEECCHHHHHHCCCCCEEEECCCCHHHHHHHHHCCEEEECCCCHHHHHHHHHHHCCCCEEECCCHHHHECCCCCEEEEECCCCCCCEEEECCCCHHCCCCCHCCCCCCEEEEEEEECCHHHHHHHHCCCCCCHHHHHHHHHHHHHCCCCCHHHHCCCCCCHHHHHHHHHHHCCCCCHHHHHHHHHHHHHHHHHHHHCCCCEEEECCCCCCCHHHHHCCCCCCCCCCCCCCCCHHHHHHHCCCCCHHHHHHHHHHHHHHHHHCCCCCCEEEECCCCCHHHHHHHHHHHHHCCCCCCCCCCEEEEEEECHHHHHCHHHHHHHCCEEEECHHHHHHHHHCCCCCCHHHHHHCCCCCHHHHHHHHHHHHHHHHCCCEEEECCCCCCCCHHHHHHHHHCCCCEEEECHHHHHHHHHHHHHHHHHCC')
#exp_texts.append('CCHHHHHHHHHHHHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCHHHCEECCCHHHCCCCCCCCCCCCCCCCCHHHHHHHHHHHCCCCCCCEEEEECCCCCCHHHHHHHHHHHHHCCCCCCCCEEEEEEECCCCCCEEEEEECCCHHHHHHHHHHHHHHHHHHHHHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCEEEEECCCCCCCCCECCCCCCCCCCHHHHHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCHHHHHHHHHHHHHHHHHHHCCCHHHHHHHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCCHHHHHHHHHHHCCCCCCCCEEEECCCCHHHHCCEEEEECCCCCEECCCCECCCCHHHHHCCCEEEEECHHHHCCHHHHHHHHHHHHCCCEEECCCHHHCCCCCCCCCCCCCCCCCEEEEEECCHHHHHHHHCCCHHHHHCCCEEEECCCCHCCCCHHHHHHHHHHHHHHHHCCCCCCCHHHHHHHHHHHHHHCCCCCCCCCCHHHHHHHHHHHHHHHHHCCCCCECHHHHHHHHHCCCCCCHHHHHHHHHHHHCCCEEEECCCCCCEEEEEEEEEECCCCCCCCEEEEEEEEECCCCCEEEEEEECCCCCHHHHHHHHHHHHHHHHHHCCCCCCCCEEEEEECCCCCCCCCCHHHHHHHHHHHHHHCCCCCCCCEEEEEEECCCCCEEECCCHHHHHHHHHHHHHHCCCCCCCEEEEEHHHHHHCCCCHHHHHHHHCCCCEEEEECCHHHHHHHHCCCCCCCECCCCCCCCCCHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCCCHHHHHHHHCCCCCCCCCCHHHHHHHHCC')
#exp_texts.append('CCCCEEEEEEEECCCCCHHHHHHHHCCCCCCCCHHCCCCCCCCCCCCCCEEEEEEEEECCCCCEEEEEECCCCHHHHHHHHHHHCCCCEEEEEEECCCCCHHHHHHHHHHHHHCCCCCEEEEEECCCCCCCCCHHHHHHHHHHCCCCCCEEEEECCCCCHHHHHHHHHHHHHHHHHCCCCCCCCCC')
#exp_texts.append('CCCCCCCCCCCCCCCCCCCCCCCHHHHHHCCCEEECCCCCCCCCCEEEEEEECCCCCEEEEEECHHHHHCCCCEEEEEEHHHCCCCCCCCCCCCCCCCCCCCCEEECCCEEEEEEECCHHHHHHHHHHCEEEEECCCCCCCHHHHHHCCCCCCCCEEEECCCHHHHHHCCCEEEEEEEEECCCCCCCCCCCEEEEEECCCCEEEEEECCCCHHHHHHHHHHHHCCCHHHEEEEECCCCCCCCCCCCCCHHHHHHHHHHHHHHCCCEEEEECHHHHHCCCCCCCCEEEEEEEEECCCCCEEEEEEEEEECCCCCCCCCHHHHHHHHHHCCCCECCCCEEEEEEEECCCCCCCCCCCCCCHHHHHHHHHHHHHHHHHHHCCCHHHHHHHHCCCCCCCCCCCCCCCCCECCCCHHHHHHHHHHHHCCHHHHHHHHHHHHHCCCCCEEEEEEEEEEECCCCCCCCCCCCCEEEEECCCCCEEEEECCCCCCCCHHHHHHHHHHHHHCCCHHHEEEECCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCHHHEEEECCEEEECCCCCCCHHHHHHHHHHCCCCCCEEEEEECCCCCCCCCCCCCCCCCCCEEEEEEEEEEEECCCCCEEEEEEEEEEECCCCCCHHHHHHHHHHHHHHHHHHHHCCCEEECCCCCCCCCECCCCHHHCCCCCHHHCCCCEEEEECCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHHHHCCCCCCEECCCCCCHHHHHHHHHCCCHHHHHCCCCCCC')
exp_texts.append('CCCCCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHCCCCCCCCEEEEEECCEECCCCCHHHHHHHHHHHHCCCCCCCCCCCCEECCCCCCCCHHHHHHHHCCCCCEEEEEECCCCCCCHHHHHHHHHHHHHHHHHHCCCCCCEEEEEECCCCCCEEEEEEEEECCCCCEEEECHHHHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHCCHHHHHHHHHHHHCCCCCEEECCCCCCCHHHHHHHHHHHHHHHHHCCCCEECCCCEEEECCCHHHHHHHHHCCCHHHHHHHHHHCCCCCCEEEECCCCCCCCEEEEEEEECCCCCCCCCEEEEEECCCCCEEEEECCCHHHHCCCCCCCEEEEECCCCCCCCCCCHHHHHCCCCCCCCCCCHHHHCCCCCCCCHHHHHHHHHHHHHHHHHCCCCEECCCCCEECCCCHHHHHHHHHHHHCCCEEEEEECCCCHHHHCCCCCCCHHHHHHCCCCCCCCCCCHHHHHHHHHHHHHHHHHHCCCCEEECCEEEECHCHHHHHHHHHHHHHHHHHHHHHCCCEEECCCCCEEEEEEEEEEEECCCCEEEEECCCEEEEECCCCCHHHHCCCEEEEEEECCCEEEEECCCCCCCCCCCC')
exp_texts.append('CCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCHHHHHHHHHHHHHHHHHHHHHCCCHHHHHHHHHHHHHHHHHHHHHHHHHHCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCHHHHHHCCCCCCCCCCCHHHHHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHHHHHHHHHHHCCCCCCCCCHHHHHHHHHHHHHHHHHHCCCCCCHHHHCCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHCCHHHHHCCCCCCC')
exp_texts.append('CCCCHHHHHHHHHHHHHHHHHHCCCCCCEEEEECCCCCCCCCCCCCCCHHHHHHHHHHCCCCCCCCCCCCEEEECCEEECCCEECCCCCCCCEEEEECCCCCCEEEEEEEECCCCEEEECCEEECCCCCCCCCCCCEEEEECCCCCEEEECCEEEECCCCCCCCCCCCCCCCCCCEEEECCEEEEECCEEECCCCEEEEECCEEEEECCEEECCCCCCEEEECCCCEEECCEEEECCCCCCCCCCCCCCCEEECCCCCCCCCCCCEEEEEEECCEEECCCCCCCCCCCCCCEEEEECCCCCCEEEECCEEECCCCCEEEEECCCCCEEECCEEEECCCCCCCCCCEEEEECCCCCCCCCEEEECCEEEECCCCCCCCECCCCCEECCCCCCCCCCCCCCCCECCCCCCCCCCCCCCCCCCCCCCCECCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHHCCCCCCCCCCC')
exp_texts.append('CCCCHCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCCHHHHHHHHHHHHHCCCCEEEEEEECCCCCEEEEECCCCCCCCCCCCCHHHHHHHHCCCCEECCCEEECCCCCEEEEEEEEEEECCEEEEEEEEEEEHHHHHHHHHCCCCCCCEEEEEECCCCCEEECCCHHHHHHHHHHHCCCCCCCCCCCEEEEEECCEEEEEEEEEECCCCCCEEEEEEEEEHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCC')
exp_texts.append('CCCCCCCCCCCCCCCCCCCCCCEEEEECCCCCCCCCCHHHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCEEECCCCCCCCCCHHHHHHHHHCCCCCCCCCCCHHHHHHHHHHHHHHCCCCEEEECCHHHHHHHHHHHHCCCCCEEEEECCCCHHHHHHHHHHHHCCCEEEECCCCCCCCHHHHHHHHCCCCCCCCCEEEEEEECCCCCCCCECCCHHHHHHHHHHHHHCCCEEEEECCCHHHHHHHCCCCHHHHCCCCCEEEEECCHHCCCCCCEEEECCHHHHHHHHHHHHHCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCCEEEECCCCCCEEEEECCCCCHHHHHHHHHHCCEEEEECCCCEEEEECCCCCCHHHHHHHHHHHHHHHHHHHHCCC')

exp_texts.append('CCCEEECCCHHHHHHHCCCCEEEEEECCCCCHHHHHHHHHHHHHHHCCCEEEEEECCHHHHHHHHHHHHHHHHHHHCCCCCEEECCCEEEECCCCEEEEEECCCCHHHCCCCCCCCEEEEECHHHCCHHHHHHHHHHCCCCCCEEEEEECCCCCCCHHHHHHHHCCCCCCEEEEECCHHHCCCCCHHHHHHHHHHHHCCHHHHHHHHCCCCCCCCCCCECCCCEEEEEECCCCCCEEEEEEECCCCCCCEEEEEEEEECCEEEEEEEEEECCCCHHHHHHHHHCCCCCCCEEEEEECCCHHHHHHHHHHCCCCEEECCCCCCCHHHHHHHHHHCCCEEECCCCHHHHHHHHCCEEEECCCCCCEECCCCCCCCCHHHHHHHHHHHHHHCCCCCCCCCHHHHCCC')
exp_texts.append('CCCCHHHHHHHHHHHCCCCCCCCHHHHHHHHCECCCCCCCCCCCCCCCCCHHHHHHHHHCCCCCCEEEEEECCCCCHHHHHHHHHHHHHHHHCCCCEEEEECCHHHHHHHHHHHHHHHHHHCHHHHHHCCCCCCCCCCCEEEECCCCEEEEECCCCCCCECCCCCEEEEECHHHCCCCCCCCCCCHHHHHHHHHHHCCCCEEEEEECCCCCCCCCCCCCCCCCCCCCCCHHHHHHHCCCCEEEEEECCCCCCEECCCHHHCCCCCCCCCCCCCCCCEEEECCCCCCECCHHHHHHHHHCCEEEEECCEEECCCCCECCCCCCCCEEEEEECCCCCCCCCHHHHHHHHHHHHHHHHHHCCHHHHHHHHHHCCCCCCCCHHHHCCCCHHHHHHHHCCCCCCCCCCCCEEEEEEEECCCCCCCEEEEEEEEECCCCCEEEEEEEEEECCCCECCCCCECCCCCCCCCHHHHHHHHHHHCCEEECCCCCCCEEEEEEEEEECCCCCCCHHHHHHHHHHHHHCCCCCCEEEEECCCCCCCCCEEECCCCCCCCCCCCCCCCCCCCEEEECCHHHHHHHHHHHCCCCCCCCEEEECCCCCHHHHHHHHHEEECCCCCEECCCCCCCHHHHHHHHHHHHHHHCCHHCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC')
exp_texts.append('CCCCCCCHHHHHHHHHHHCCHHHHHCCCCCEEEEEECCCCCHHHHHHHHHHHHHHHCCCCCEEEEEECCHHHHHHHHHHHHHHHCCHHHHHHCCCCCCCCCCCCCCEECCEEECCCCCEEEEEEECCCCCECCCCCEEEEECCCCCCCCCCCHHHHHHHHHHHHHHHHHHCCCCCEEEEEECCCCCCCHHHHHHHHHHCCCCCCEEEEEECCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHCCHHHHHHHHCCCCCCCCCCCECHHHHHHCCCCCCCCCEEEEEEECCCCCCCCCCCEEEEEEEEECCEEEEEEEEEECCCHHHHHHHHHHHHHHCCCCHEEEECCCCCCHHHHHHHHHHCCCCEECCCCCCHHHHHHHHHHHHHCCCEECCCCCCCCCCHHHHHHHHHHCCCCCCCCHHHHHHHHHHHHHCCCCCCEEECC')
exp_texts.append('CCCCEEEECCHHHHHHHHHHHHCCCCCEEEEEEECCCCCHHHHHHHHHHHHHHHCCCCEEEEEECCHHHHHHHHHHHHHHHHHCCCCCCCCCCCCCCEEEECCCCCEEEEEECCCCHHCCCCCCCCEEEEECCCCCCHHHHHHHHHHHCCCCCCCEEEEEECCCCCCCHHHHHHHHCCCCCCCEEEEEECHHHCCCCCHHHHHHHHHHHHCCHHHHHHHHHCCECCCCCCEECCCEECCCCHHHHHCCCCCEEEEEEEECCCCCCCEEEEEEEEECCCCEEEEEEEEEECCCCHHHHHHHHHHCCCCCEEEEECCCCHHHHHHHHHCCCCCEEECCCCCCCHHHHHHHHHHCEEEECCCCHHHHHHHHCCEEEEECCCCCEEEECCCCCCCHHHHHHHHHHHHHHCCCCCCCC')
exp_texts.append('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHCCCHHHHHCCCCCCCCCHHHHCCCCCCCCCCCCCCCHHHHHHCCCCCEEEEEECCCCCHHHHHHHHHHHHHHCCCCEEEEEECCHHHHHHHHHHHHHHCHHCCCCCEEECCCCEEECCCCCEEEEEECCCCCCHHHHCCCCCCEEEEECHHHCCCHHHHHHHHHHHCCCCHHHCCCCEEEEEECCCCCCCCHHHHHHHHCCCCCCCCCCEEECCCCEEECCCCCCCCCCCCCEEEEEECCCCCCCCCCCCHHHHHHHHCCCHHHHHHHHCCCCCCCCCCCCCCCCCCCEECCCCCCCCCCCEEEEEECCCCCCEEEEEEEECCCCCEEEEEEEEECCCCHHHHHHHHHHHHHCCCCCCEEEECHHHHHCCCCCHHHHHHHHHCCCCECCCCCCHHHHHHHHHHHHHCCCCCCCCCEEECCCCHHHHHHHCCCCCCCCCCCCCCCCCCCCHHHHHHHHHHHHHCCCCCCCCHHCCCCCCCCCCCCCCCCC')
test = {'label': [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], 'text': exp_texts} # ground truth labels included 

shap_values = explainer_stereo(test, fixed_context=1)

for i, shap_value in enumerate(shap_values): 
    print(shap_values[i].base_values)
    print(exp_texts[i])
    print(get_prediction(exp_texts[i])) # get prediction from tuned model 
    shap_string = [] 
    for value, text in zip(shap_value.values, shap_value.data): # examine by-token value 
        shap_string.append(text + '(' + str(format(value, ".3f")) + ')')
    print(" ".join(shap_string))
